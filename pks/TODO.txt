[Now]

ImagesImporter
    Test 기반 만들기
        이미지 리사이징 : Done
        이미지 등록 : Done
            RawFile URL 처리 부분 리팩토링 : Done
            RawFile 쉽게 등록할 수 있도록 하기 (Token Authentication) : Done
        RawFile 처리 : Done
            vd 로 전체 리스트 조회 : Done
            mhash 계산 : Done
            중복 RawFile 배제 : Done
        Image 처리
            RawFile 로 부터 전체 리스트 조회
            dhash 계산
            중복 Image 배제, EXIF 정보 가져오기
        이미지들 전체를 뽑아 메모리에 저장
        1차 그룹화 : GPS 좌표만 사용
            각 점들마다 100~1km 미만인 점들을 모아 Group 화 (disjoint 아님)
                수치는 튜닝 필요
            포함되는 (동일 포함) Group 삭제
            여러 그룹에 속한 점들의 경우, 더 적합한 하나의 Group 에만 속하도록 처리
                Group element 와의 min distance 로 판단
            N*N distance matrix 만들어 구현 : 거리 함수 성질 (c >= |a - b|) 이용하여 계산량 감소 
        2차 그룹화 : timestamp 만 사용.
            1차 그룹화된 그룹을 다시 분리하는 용도.
            각 점들마다 30분~3시간 미만인 점들을 모아 Group 화 (disjoint 아님)
                수치는 튜닝 필요
            포함되는 (동일 포함) Group 삭제
            여러 그룹에 속한 점들의 경우, 더 적합한 하나의 Group 에만 속하도록 처리
                Group element 와의 min distance 로 판단
        3차 그룹화
            2차 그룹화된 그룹들을 쪼개기
            4차원 시공간 상에서의 거리함수를 이용하여 다시 쪼개기
        4차 UserPlace 화
            2차 Group 화된 단위로 그대로 UserPlace 화
                이미 UserPlace 에 매핑된 이미지가 있으면, 그 이미지는  빼고 PostPiece 만들어 그 UserPlace 에 연결
                서로 다른 UserPlace 에 매핑된 이미지가 있다면? 시간 순서를 이용하여 Group 을 쪼개어 처리
            3차 Group 화된 단위로 PostPiece 화

ImagesImporter, 보안 처리 : myself 아닌 걸로 넘어올 때의 처리, tests.py 보강


해외 처리
    VD 의 국가/언어/타임존 활용
    어드민 맵 띄우는 부분 처리 
포스퀘어 장소화 구현
구글 장소화 구현


Tag 기능 뼈대 잡기
    확률 기반
    기본은 Place, 상속받아 UserPlace 에서 Override
    Place 레벨에서는 관측 확률, UserPlace 레벨에서는 유저가 붙였다면 100%
    관측되지 않은 Tag 확률 계산은 다른 Tag 들을 활용한 간접 계산


퍼미션 처리


장소화 로직 정리해서 모으기


get_queryset(), get_object() 리팩토링 


Content.get_from_json() 에서 에러 났을 때 empty UserPlace 가 저장되는 버그 처리 

VD.timezone 처리

URL redirect 처리
    Content.same 처리 구조 잡기
    네이버맵 모바일용 단축 URL 처리




위치 트래킹
API 호출 이력
지도 바로가기


Import 체계를 위한, UserPlaceSerializer 분리
    List 용과 Retrieve 용을 분리 : Retrieve 용을 별도 신설해서 특수 처리




같은 장소로 판정된 UserPlace, Place Merge
    --> 특히 다른 VD  인데 같은 Place 인 UserPlace 가 있는 경우



URL 리다이렉션 처리

UserPlace, Place 컬럼값들 채워지는 로직 전반적으로 체크


자동 장소화 추가 구현


더 이상 DB 리셋이 필요 없을지 체크 

장소화 어드민 만들기

MAMMA 에 의한 장소화, FULL 구현

python module import 부분 정리


UserPost 모아 PlacePost 생성하는 로직


전화번호 파싱 시 국가 처리

RU 단위로 잘 처리되는지 테스트 추가

mhash, dhash 처리하는 부분 장고 Celery 로 구현

Content accessed 캐시쪽 미구현 사항 구현

[Later]
Admin 사이트 로그인 테스트 기능 추가
user-detail 뷰가 없을 시, 단위테스트에서는 문제가 없는데 브라우저에서는 에러가 나는 상황 파악 및 해결
VD.owner 저장하는 부분 로직 튜닝
register, login 등 RESTfull 하지 않은 API 들에 대한 재검토
이메일 인증 처리
Permission 관련 구현 추가
불필요해 보이는 Interface, 사무실/개발전용 Permission 으로 해결
exif_lib.py 리팩토링 및 튜닝

AID 개선 : timestamp 값을 Model.lastModified 기반으로 처리되도록 변경
    --> for 캐싱
최상위 Model 만들고, AID, 캐싱, Permission 등 처리
테스트 후 파일 삭제 로직 만들기

같은 uuid 를 가지는 이미지가 올라왔을 때 처리


!!!
서버에 무조건 접속 베이스로 구현 변경
VD 속성에 Country, Language 추가
위치 트래킹 기능 추가

PlaceContent Tuning : flat 하게 흩어져 있는 속성들 합치기
Content Tuning : base class 만들고, image/url 합치기, 이거 하면서 hash 충돌 문제도 체크하기

Place.parent, Place.representative 속성 만들고 구현하기

해시 collision 해결 : collision 이 발생하면 앞에 공백을 붙여서 다시 재시도
Point 타입에 왜 gist 인덱스가 걸려 있는지 확인
content 조회를 파일 access 로 바꾸면서, uuid 조회는 join 을 하지 않도록 수정
Post 관련 Tuning : Foreign Key 를 끊어서, Content 모델 조회 없이 바로 uuid 를 저장하도록. 혹은 content 값에서 double check 를 하거나 (CPU 만 쓰면 되므로)

Serializer 로 데이터를 넘기는 방법이 파악되었으니, 필요한 곳에 이를 이용하여 리팩토링
    --> perform_create()
    
get_queryset() 에 의존한 검색 구현, filter_queryset() 활용 여지가 있는지 파악하기
